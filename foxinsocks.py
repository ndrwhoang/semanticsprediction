import os
import json
import torch
import configparser
from itertools import chain
import numpy as np
from torch.nn.utils.rnn import pad_sequence



def test_output_indexing():
    raw_logits = torch.FloatTensor(8, 512, 768)
    node_labels = [{(2,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1642, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (3,): [-0.0469, -0.0416, 1.1753, -1.3247, -1.1146, 0.8558, 0.9952, 0.8931, -1.4626, -1.1688, -1.4106, 0.9252, -0.9337, -1.2142, 0.967, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (5,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -1.1685, 1.2257, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.3996, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 0.2016, -3.0]}, {(1,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1641, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (3,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1685, -1.1685, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (4,): [1.1842, -1.1557, 1.1733, 0.3015, -1.5965, 0.51, 0.4587, -1.3533, -1.5836, -1.3346, 0.121, 0.4524, 0.982, -1.4803, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (6,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -1.1685, 1.2257, -3.0, 1.4852, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.4863, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0], (8,): [0.22, -1.1557, 0.1639, 0.6159, -1.3384, -1.2478, -1.1443, 0.8526, -1.3644, -1.1448, -1.289, 0.6675, 1.1413, -1.356, -0.1483, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (10, 11): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -0.035, 1.2257, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.5439, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0]}, {(0,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1642, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (1,): [0.2395, -1.1557, 1.18, -1.438, -1.454, -1.2314, 0.7647, -1.3374, -1.3029, -1.4028, 0.366, 0.7441, 1.0921, -1.1543, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (5,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0.0069, 0.0069, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (11,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.0197, -1.1685, 1.1637, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.5497, -3.0, -3.0, -3.0, -1.3667, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.3667, -3.0, -3.0, -1.3667, -3.0], (25,): [0.1469, -1.1557, 0.1276, -1.2994, 0.7963,
}, {(0,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.074, -0.074, 1.2156, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (2,): [1.1551, -1.1557, 0.0832, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (9,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.074, -1.2304, 1.2156, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (15,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1.2156, -0.3979, -0.074, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.4995, -3.0, -3.0, -3.0, -1.4135, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.4135, -3.0, -3.0, -1.4135, -3.0], (28,): [1.1529,
}]
    edge_labels = [{((3,), (2,)): [-1.3932, -1.3941, 1.4353, -1.3913, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], ((3,), (5,)): [10, 10, 10, 10, 0.0458, -0.0, -0.0, -0.3556, -0.0561, 0.1096, 0.236, 0.236, -0.0561, -0.1343, -0.0, -0.0204, -0.1343, -0.2656]}, {((4,), (3,)): [10, 10, 10, 10, 1.389, -0.0, -0.0, -1.3053, -0.17, -1.3995, 1.3903, 0.1093, -0.0, -1.307, -0.0, 0.0618, -0.0, 0.1093], ((8,), (6,)): [10, 10, 10, 10, 0.0882, 1.3644, 1.3641, 1.3616, -0.0525, 1.3639, 1.3639, 1.3642, -1.2224, -0.0246, -0.0246, -0.0246, -1.3138, -0.0], ((8,), (10,)): [10, 10, 10, 10, -0.0593, -1.4459, -0.1038, -1.4433, -0.0132, 1.2805, 0.0017, -0.1003, -0.0103, 0.0571, 1.2804, -1.4439, -0.1003, -0.1713]}, {((4,), (3,)): [10, 10, 10, 10, 1.2756, -0.0215, 0.0402, 1.2755, -0.1007, 1.2757, 1.2756, 1.2753, -0.3985, -0.0215, -0.0349, 0.0402, -0.0306, -0.0215], ((4,), (5,)): [10, 10, 10, 10, 0.0014, -1.0664, -1.0656, -1.0663, -0.1772, 0.0014, 0.2206, 0.2206, -0.1772, -0.059, -0.0, 0.2206, -0.0, -0.059], ((9,), (8,)): [10, 10, 10, 10,
}, {((2,), (1,)): [10, 10, 10, 10, -0.0314, -0.1061, 1.2768, -0.0874, -0.0, 1.2746, 1.2751, 1.2768, -0.0, 1.2767, 1.2771, 0.0207, -0.1647, 1.2768], ((2,), (5,)): [10, 10, 10, 10, -0.0053, -0.6655, -0.6658, -0.6657, 1.3761, 1.3755, 1.3774, 0.0879, 0.0879, 1.377, 0.0587, 0.0318, -1.2256, -1.2267], ((2,), (8,)): [1.3642, -0.0246, 1.3637, -0.0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]}]

    assert len(node_labels) == len(edge_labels)

    print([len(label) for label in node_labels])
    print([len(label) for label in edge_labels])

    node_outputs = []
    for i_sample, node_label in enumerate(node_labels):
        node_output = [torch.mean(raw_logits[i_sample, idx, :], dim=0) for idx in node_label.keys()]
        node_output = torch.stack(node_output, dim=0)
        node_outputs.append(node_output)
    node_outputs = pad_sequence(node_outputs, batch_first=True)
    print(node_outputs.size())

    # edge_outputs = []
    # for i_sample, edge_id_pair in enumerate(edge_labels):
    #     print(edge_id_pair)
    #     edge_output = [torch.cat((torch.mean(raw_logits[i_sample, idx[0], :], dim=0), torch.mean(
    #         raw_logits[i_sample, idx[1], :], dim=0))) for idx in edge_id_pair.keys()]
    #     edge_output = torch.stack(edge_output, dim=0)
    #     print(edge_output.size())
    #     edge_outputs.append(edge_output)
    # edge_outputs = pad_sequence(edge_outputs, batch_first=True)
    # print(edge_outputs.size())

def test_output_indexing_new():
    raw_logits = torch.FloatTensor(4, 512, 768)
    
    node_ids = ([(2,), (3,), (5,)], [(1,), (3,), (4,), (6,), (8,), (10, 11)], [(0,), (1,), (5,), (11,), (25,), (30, 31)], [(0,), (2,), (9,), (15,), (28,), (32, 33)])
    edge_ids = ([((3,), (2,)), ((3,), (5,))], [((0,), (0,))], [((0,), (0,))], [((0,), (0,))])
    
    assert len(node_ids) == len(edge_ids)

    print([len(label) for label in node_ids])
    print([len(label) for label in edge_ids])

    node_outputs = []
    for i_sample, node_id in enumerate(node_ids):
        node_output = [torch.mean(raw_logits[i_sample, idx, :], dim=0) for idx in node_id]
        node_output = torch.stack(node_output, dim=0)
        node_outputs.append(node_output)
    node_outputs = pad_sequence(node_outputs, batch_first=True)
    print(node_outputs.size())
    
    edge_outputs = []
    for i_sample, edge_id_pair in enumerate(edge_ids):
        edge_output = [torch.cat((torch.mean(raw_logits[i_sample, idx[0], :], dim=0), torch.mean(raw_logits[i_sample, idx[1], :], dim=0))) for idx in edge_id_pair]
        edge_output = torch.stack(edge_output, dim=0)
        edge_outputs.append(edge_output)
    edge_outputs = pad_sequence(edge_outputs, batch_first=True)
    print(edge_outputs.size())

def test_get_masking_ids():
    config = configparser.ConfigParser()
    config.read(os.path.join('configs', 'config.cfg'))
    masked_node_subspace = config['training']['node_subspace'].split(' ')
    masked_edge_subspace = config['training']['edge_subspace'].split(' ')
    # if masked_node_subspace == ['none'] and masked_edge_subspace == ['none']:
    #     return [], []
    subspace_dict_path = os.path.join(
        *config['data_path']['subspace_dict'].split('\\'))
    with open(subspace_dict_path, 'r') as f:
        subspace2id = json.load(f)
    f.close()
    masked_node_idx = [subspace2id[subspace]
                       for subspace in masked_node_subspace]
    masked_edge_idx = [subspace2id[subspace]
                       for subspace in masked_edge_subspace]
    masked_node_idx = list(chain.from_iterable(masked_node_idx))
    masked_edge_idx = list(chain.from_iterable(masked_edge_idx))

    print(masked_node_idx)
    print(masked_edge_idx)


def test_make_label_tensor():
    node_labels = [{(2,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1642, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (3,): [-0.0469, -0.0416, 1.1753, -1.3247, -1.1146, 0.8558, 0.9952, 0.8931, -1.4626, -1.1688, -1.4106, 0.9252, -0.9337, -1.2142, 0.967, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (5,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -1.1685, 1.2257, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.3996, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 0.2016, -3.0]}, {(1,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1641, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (3,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1685, -1.1685, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (4,): [1.1842, -1.1557, 1.1733, 0.3015, -1.5965, 0.51, 0.4587, -1.3533, -1.5836, -1.3346, 0.121, 0.4524, 0.982, -1.4803, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (6,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -1.1685, 1.2257, -3.0, 1.4852, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.4863, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0], (8,): [0.22, -1.1557, 0.1639, 0.6159, -1.3384, -1.2478, -1.1443, 0.8526, -1.3644, -1.1448, -1.289, 0.6675, 1.1413, -1.356, -0.1483, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (10, 11): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.035, -0.035, 1.2257, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.5439, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0]}, {(0,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1.1642, -1.1642, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (1,): [0.2395, -1.1557, 1.18, -1.438, -1.454, -1.2314, 0.7647, -1.3374, -1.3029, -1.4028, 0.366, 0.7441, 1.0921, -1.1543, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (5,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0.0069, 0.0069, 1.2257, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (11,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.0197, -1.1685, 1.1637, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.5497, -3.0, -3.0, -3.0, -1.3667, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.3667, -3.0, -3.0, -1.3667, -3.0], (25,): [0.1469, -1.1557, 0.1276, -1.2994, 0.7963,
}, {(0,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.074, -0.074, 1.2156, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (2,): [1.1551, -1.1557, 0.0832, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1.033, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (9,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -0.074, -1.2304, 1.2156, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], (15,): [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1.2156, -0.3979, -0.074, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, 1.4995, -3.0, -3.0, -3.0, -1.4135, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -1.4135, -3.0, -3.0, -1.4135, -3.0], (28,): [1.1529,
}]
    edge_labels = [{((3,), (2,)): [-1.3932, -1.3941, 1.4353, -1.3913, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], ((3,), (5,)): [10, 10, 10, 10, 0.0458, -0.0, -0.0, -0.3556, -0.0561, 0.1096, 0.236, 0.236, -0.0561, -0.1343, -0.0, -0.0204, -0.1343, -0.2656]}, {((4,), (3,)): [10, 10, 10, 10, 1.389, -0.0, -0.0, -1.3053, -0.17, -1.3995, 1.3903, 0.1093, -0.0, -1.307, -0.0, 0.0618, -0.0, 0.1093], ((8,), (6,)): [10, 10, 10, 10, 0.0882, 1.3644, 1.3641, 1.3616, -0.0525, 1.3639, 1.3639, 1.3642, -1.2224, -0.0246, -0.0246, -0.0246, -1.3138, -0.0], ((8,), (10,)): [10, 10, 10, 10, -0.0593, -1.4459, -0.1038, -1.4433, -0.0132, 1.2805, 0.0017, -0.1003, -0.0103, 0.0571, 1.2804, -1.4439, -0.1003, -0.1713]}, {((4,), (3,)): [10, 10, 10, 10, 1.2756, -0.0215, 0.0402, 1.2755, -0.1007, 1.2757, 1.2756, 1.2753, -0.3985, -0.0215, -0.0349, 0.0402, -0.0306, -0.0215], ((4,), (5,)): [10, 10, 10, 10, 0.0014, -1.0664, -1.0656, -1.0663, -0.1772, 0.0014, 0.2206, 0.2206, -0.1772, -0.059, -0.0, 0.2206, -0.0, -0.059], ((9,), (8,)): [10, 10, 10, 10,
}, {((2,), (1,)): [10, 10, 10, 10, -0.0314, -0.1061, 1.2768, -0.0874, -0.0, 1.2746, 1.2751, 1.2768, -0.0, 1.2767, 1.2771, 0.0207, -0.1647, 1.2768], ((2,), (5,)): [10, 10, 10, 10, -0.0053, -0.6655, -0.6658, -0.6657, 1.3761, 1.3755, 1.3774, 0.0879, 0.0879, 1.377, 0.0587, 0.0318, -1.2256, -1.2267], ((2,), (8,)): [1.3642, -0.0246, 1.3637, -0.0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]}]

    label_out = []
    for i_sample, label in enumerate(node_labels):
        label_tensor = [torch.tensor(label_vec) for label_vec in label.values()]
        label_tensor = torch.stack(label_tensor, dim=0)
        print(label_tensor.size())
        label_out.append(label_tensor)
    label_out = pad_sequence(label_out, batch_first=True)
    mask = label_out != 10
    
    print(label_out[0, :, :].size())
    print(mask[0, :, :].size())
    
    label_out = label_out.tolist()
    mask = mask.tolist()
    
    for (sl, sm) in zip(label_out, mask):
        for (ts, ms) in zip(sl, sm):
            for (lv, mv) in zip(ts, ms):
                if lv == 10.0 and mv !=False:
                    print('aaaaaaaa')
                if lv != 10.0 and mv != True:
                    print('bbbbbbbbbbbbbb')


def masking_loss():
    null = float('nan')
    word_1 = torch.from_numpy(np.asarray([-1.3932, -1.3941, 1.4353, -1.3913, null, null, null, null, null, null, null, null, null, null, null, null, null, null]))
    word_2 = torch.from_numpy(np.asarray([null, null, null, null, 0.0458, -0.0, -0.0, -0.3556, -0.0561, 0.1096, 0.236, 0.236, -0.0561, -0.1343, -0.0, -0.0204, -0.1343, -0.2656]))
    true_ = torch.stack([word_1, word_2], dim=0).unsqueeze(0)
    pred = torch.rand(1, 2, 18)
    
    mask = torch.ones(true_.size())
    mask[:, :, []] = 0.
    mask_ = torch.isnan(true_) != True
    mask_ = mask_*mask
    
    print(true_)
    print(mask_)
    print(mask_.sum())
    print(mask)
    
    a = (torch.nan_to_num(true_)**2)*mask_ 
    print(a)
    
    

if __name__ == '__main__':
    print('hello world')
    # test_output_indexing_new()
    masking_loss()